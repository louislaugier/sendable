services:
  api:
    build:
      context: ./api
      dockerfile: Dockerfile.dev
    volumes:
      - ./api/:/go/src/sendable/api
    ports:
      # - 443:443
      - 80:80
    networks:
      - vpc_local
    deploy:
      replicas: 1
      update_config:
        parallelism: 1
        delay: 10s
      restart_policy:
        condition: on-failure
  db:
    build:
      context: ./database
      dockerfile: Dockerfile
    env_file:
      - ./database/.env
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: pass
      POSTGRES_DB: db
    ports:
      - 5432:5432
    networks:
      - vpc_local
    deploy:
      replicas: 1
      restart_policy:
        condition: on-failure
  reacher:
    image: reacherhq/backend:latest
    environment:
      - RCH_WORKER_CONCURRENCY=10
      # - RCH_AMQP_ADDR=amqp://localhost
      # - RCH_AMQP_ADDR=amqp://rabbitmq:5672
    networks:
      - vpc_local
    deploy:
      replicas: 1
      restart_policy:
        condition: on-failure
  # rabbitmq:
  #   image: rabbitmq:3.12-management
  # clamav:
  #   image: clamav/clamav:1.3.0-41
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile.dev
    volumes:
      - ./frontend/app/:/frontend/app
      - ./frontend/public/:/frontend/public
      - ./frontend/package.json/:/frontend/package.json
      # - ./frontend/package-lock.json/:/frontend/package-lock.json
      - ./frontend/tailwind.config.ts/:/frontend/tailwind.config.ts
      - frontend_node_modules:/frontend/node_modules
    ports:
      - 3000:5173
    networks:
      - vpc_local
    deploy:
      replicas: 1
      restart_policy:
        condition: on-failure
  # traefik:
  #   image: traefik:v2.11.6
  #   restart: unless-stopped
  #   networks:
  #     vpc_local:
  #       ipv4_address: "172.25.1.5"

  #   ports:
  #     - "80:80"
  #     - "443:443"
  #     # - "8080:8080"
  #   labels:
  #     - "traefik.http.routers.traefik.rule=Host(`traefik.infra.dev.dailypcm.com`)"
  #     - "traefik.http.routers.traefik.service=api@internal"
  #     # - "traefik.http.middlewares.sslheader.headers.customrequestheaders.X-Forwarded-Proto: https"
  #   volumes:
  #     - "/var/run/docker.sock:/var/run/docker.sock"
  #     - ./traefik/traefik.yml:/etc/traefik/traefik.yml:ro
  #     - ./traefik/certs:/etc/traefik/certs:ro
  #     # - "./traefik/letsencrypt:/letsencrypt"

volumes:
  frontend_node_modules:
networks:
  vpc_local:
    # driver: overlay
    driver: bridge
