services:
  api:
    build:
      context: ./api
      dockerfile: Dockerfile.dev
    volumes:
      - ./api/:/go/src/sendable/api
      - certbot-etc:/etc/letsencrypt
      - certbot-web:/var/www/certbot
    ports:
      - 80:80
      - 443:443
    networks:
      - vpc_local
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--timeout=2", "http://localhost/v1/healthz", "-O", "/dev/null"]
      interval: 10s
      timeout: 5s
      retries: 5
    environment:
      - DOMAIN=${DOMAIN}
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_DB=${POSTGRES_DB}
    depends_on:
      db:
        condition: service_started
      reacher:
        condition: service_started
    restart: unless-stopped
  certbot:
    image: certbot/certbot
    volumes:
      - certbot-etc:/etc/letsencrypt
      - certbot-web:/var/www/certbot
    entrypoint: | 
      /bin/sh -c " \
        export DOMAIN=${DOMAIN}; \
        trap exit TERM; \
        if [ ! -f /etc/letsencrypt/live/$DOMAIN/fullchain.pem ]; then \\
          certbot certonly --webroot -w /var/www/certbot --email hello@${DOMAIN} --agree-tos --no-eff-email --non-interactive -d $DOMAIN; \\
        fi; \\
        while :; do \\
          certbot renew --non-interactive; \\
          sleep 12h & wait $$!; \\
        done; \\
      "
    environment:
      - DOMAIN=${DOMAIN}
    networks:
      - vpc_local
    depends_on:
      api:
        condition: service_healthy
    restart: on-failure
  db:
    build:
      context: ./database
    env_file:
      - ./database/.env
    environment:
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_DB=${POSTGRES_DB}
    volumes:
      - ./api/files:/api_files/files:ro
    ports:
      - 5432:5432
    networks:
      - vpc_local
    restart: unless-stopped
  reacher:
    image: reacherhq/backend:v0.7.1-beta.1
    # build:
      # context: ./reacher
      # dockerfile: Dockerfile
    environment:
      - RCH_WORKER_CONCURRENCY=10
      - RCH__FROM_EMAIL=hello@${DOMAIN}
      - RCH__HELLO_NAME=${DOMAIN}
      - RUST_LOG=debug
      # - RCH_AMQP_ADDR=amqp://localhost
      # - RCH_AMQP_ADDR=amqp://rabbitmq:5672
    networks:
      - vpc_local
    # shm_size: '1024m'
    # rabbitmq:
    #   image: rabbitmq:3.12-management
    # clamav:
    #   image: clamav/clamav:1.3.0-41
    restart: unless-stopped
  # frontend: # on a separate host
  #   build:
  #     context: ./frontend
  #     dockerfile: Dockerfile.dev
  #   volumes:
  #     - ./frontend/app/:/frontend/app
  #     - ./frontend/public/:/frontend/public
  #     - ./frontend/package.json/:/frontend/package.json
  #     # - ./frontend/package-lock.json/:/frontend/package-lock.json
  #     - ./frontend/tailwind.config.ts/:/frontend/tailwind.config.ts
  #     - frontend_node_modules:/frontend/node_modules
  #   ports:
  #     - 3000:5173
  #   networks:
  #     - vpc_local
  #   deploy:
  #     replicas: 1
  #     restart_policy:
  #       condition: on-failure
volumes:
  certbot-etc:
  certbot-web:
  # frontend_node_modules:
networks:
  vpc_local:
    # driver: overlay
    driver: bridge
